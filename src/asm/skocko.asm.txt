.data
6
0
75
0x100
0x140
0x200
2, 0	;; boja1, brojac
1, 4	;; dve boje ne koristene
0, 0    ;; pozicija1
1, 0	;; pozcija2
2, 0	;; pozcija3
3, 0	;; pozcija4
0, 4	;; pogadjanje1
1, 4	;; pogadjanje2
2, 4	;; pogadjanje3
3, 4	;; pogadjanje4
-1, -1  ;; end


.text
/*
	Spisak registara:
	R0 - tmp register
	R1 - tmp chunk x
	R2 - tmp chunk y
	R3 - color
	R4 - p_top
	R5 - p_pb_dec
	R6 - p_frame_sync
	R7 - p_rgb_matrix
*/


begin:
	;; Setup pointers and color.
	inc R0, R0                  ;; addr = 1
	inc R0, R0                  ;; addr = 2
	inc R0, R0                  ;; addr = 3
	ld R7, R0                   ;; R7 <- p_rgb_matrix 0x100
	inc R0, R0                  ;; addr = 4
	ld R6, R0                   ;; R6 <- p_frame_sync 0x140
	inc R0, R0                  ;; addr = 5
	ld R5, R0                   ;; R5 <- p_pb_dec 0x200
	inc R3, R3                  ;; color = RED
	
frame_sync_rising_edge:
frame_sync_wait_0:
	ld R0, R6                   ;; R0 <- p_frame_sync
	jmpnz frame_sync_wait_0
frame_sync_wait_1:
	ld R0, R6                   ;; R0 <- p_frame_sync
	jmpz frame_sync_wait_1



	
	


draw_begin:
	sub R0, R0, R0              ;; addr = 0
	ld R4, R0

	inc R4, R4
	inc R4, R4
	inc R4, R4
	inc R4, R4
	
	;; auto 
	ld R1, R4                    
	inc R4, R4
	ld R2, R4                  
	inc R4, R4                  
	;; p_rgb_matrix + (y << 3) + x
	shl R2, R2
	shl R2, R2
	shl R2, R2
	add R2, R1, R2              ;; (y << 3) + x
	add R2, R7, R2              ;; p_rgb_matrix + 
	
	sub R0, R0, R0              ;; addr = 0
	ld R4, R0
	ld R0, R4
	sub R3, R3, R3
	add R3, R3, R0				;; prva boja
	st R3, R2
	;;sub R3, R3, R3
	;;inc R3, R3
	sub R0, R0, R0              ;; addr = 0
	ld R4, R0
	shl R4, R4
	
	
	
	
	
	
	
	ld R1, R4                    
	inc R4, R4
	ld R2, R4                  
	inc R4, R4                  
	;; p_rgb_matrix + (y << 3) + x
	shl R2, R2
	shl R2, R2
	shl R2, R2
	add R2, R1, R2              ;; (y << 3) + x
	add R2, R7, R2              ;; p_rgb_matrix + 
	
	shl R3, R3
	st R3, R2
	shr R3, R3
	

	ld R1, R4                    
	inc R4, R4
	ld R2, R4                  
	inc R4, R4                  
	;; p_rgb_matrix + (y << 3) + x
	shl R2, R2
	shl R2, R2
	shl R2, R2
	add R2, R1, R2              ;; (y << 3) + x
	add R2, R7, R2              ;; p_rgb_matrix + 
	shr R3, R3
	st R3, R2
	shl R3, R3
	
	;; prepreka2
	ld R1, R4                    
	inc R4, R4
	ld R2, R4                  
	inc R4, R4                  
	;; p_rgb_matrix + (y << 3) + x
	shl R2, R2
	shl R2, R2
	shl R2, R2
	add R2, R1, R2              ;; (y << 3) + x
	add R2, R7, R2              ;; p_rgb_matrix + 
	shl R3, R3
	st R3, R2
	shl R3, R3
	
	sub R3, R3, R3
	inc R3, R3
	
	
	
	
	
	
	
	;; prepreka3
	ld R1, R4                    
	inc R4, R4
	ld R2, R4                  
	inc R4, R4                  
	;; p_rgb_matrix + (y << 3) + x
	shl R2, R2
	shl R2, R2
	shl R2, R2
	add R2, R1, R2              ;; (y << 3) + x
	add R2, R7, R2              ;; p_rgb_matrix + 
	st R3, R2
	
	;; prepreka4
	ld R1, R4                    
	inc R4, R4
	ld R2, R4                  
	inc R4, R4                  
	;; p_rgb_matrix + (y << 3) + x
	shl R2, R2
	shl R2, R2
	shl R2, R2
	add R2, R1, R2              ;; (y << 3) + x
	add R2, R7, R2              ;; p_rgb_matrix + 
	st R3, R2
	
		
	;; prepreka4
	ld R1, R4                    
	inc R4, R4
	ld R2, R4                  
	inc R4, R4                  
	;; p_rgb_matrix + (y << 3) + x
	shl R2, R2
	shl R2, R2
	shl R2, R2
	add R2, R1, R2              ;; (y << 3) + x
	add R2, R7, R2              ;; p_rgb_matrix + 
	st R3, R2
	
		
	;; prepreka4
	ld R1, R4                    
	inc R4, R4
	ld R2, R4                  
	inc R4, R4                  
	;; p_rgb_matrix + (y << 3) + x
	shl R2, R2
	shl R2, R2
	shl R2, R2
	add R2, R1, R2              ;; (y << 3) + x
	add R2, R7, R2              ;; p_rgb_matrix + 
	st R3, R2
	
draw_end:



move_begin:
	
	sub R0, R0, R0              ;; addr = 0
	ld R4, R0  
	inc R4, R4	
	ld R0, R4   
	jmpz prvaRunda
	 

	
prvaRunda:
	ld R1, R5 
	dec R4, R4	
	ld R0, R4 

	and R0, R0, R1
	jmpz pogodioPrvu
nijePogodioPrvu:
	inc R4, R4
	inc R4, R4
	inc R4, R4
	inc R4, R4 
	
	inc R4, R4
	inc R4, R4
	inc R4, R4
	inc R4, R4 

	inc R4, R4
	inc R4, R4
	inc R4, R4
	inc R4, R4 
	
	inc R4, R4

	
	ld R0, R4
	dec R0, R0
	st R0, R4
	jmp dalje
pogodioPrvu:
	inc R4, R4
	inc R4, R4
	inc R4, R4
	inc R4, R4 
	
	inc R4, R4
	inc R4, R4
	inc R4, R4
	inc R4, R4 

	inc R4, R4
	inc R4, R4
	inc R4, R4
	inc R4, R4 
	
	inc R4, R4


	ld R0, R4
	inc R0, R0
	st R0, R4
	
	add R0, R0, R1             	
	
	sub R2,R2,R2
	dec R2,R2			    
	sub R2,R2,R0
		    
dalje:
	
move_end:






end:													
	jmp frame_sync_rising_edge		

gameover: 
	sub R0, R0, R0
	